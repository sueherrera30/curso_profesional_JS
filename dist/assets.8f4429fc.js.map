{"version":3,"sources":["assets/MediaPlayer.js","plugins/AutoPlay.js","plugins/AutoPause.js","assets/index.js"],"names":["MediaPlayer","config","media","el","plugins","initPlugins","prototype","player","play","pause","playOrPause","muted","value","forEach","plugin","run","paused","mute","unmute","muteOrNoT","AutoPlay","AutoPause","constructor","threshhold","handleIntersection","bind","handleVisibilityChange","observer","IntersectionObserver","observe","document","addEventListener","entries","entry","isVisible","visibilityState","video","querySelector","btn","btnUnmute","getElementById","console","log","AutoPLay","onclick","navigator","serviceWorker","register","catch","error","message"],"mappings":";;AGAA;;AACA;;AACA;AHFA,AEAA,ADAA,MCAMqB,GFAGrB,ACAAoB,MCAT,CAAgB,CDAhB,GDAA,ACAmB,CDAEnB,ACAA,MDArB,EAA4B;AACxB,AEAAqB,EAAAA,KFAKpB,KAAL,CEAW,EFAED,CEAA,KFAM,CAACE,EAApB,CADwB,CACD;AECnB,ADDRiB,QAAQ,CCCKG,ADDJjB,SAAT,CCCQ,ADDWS,GCCO,ADD1B,GAAyB,CCCjB,EACA,KAAKS,EDFqBjB,MAAT,EAAiB,QCElC,GAA0B,KAAKiB,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAD1B;AFAJ,AGD4C,ADGxC,ADHoC,ODCnCrB,EEEIsB,KFFT,GAAezB,MAAM,CAACG,OAAP,AEEX,GAA8B,CFFD,EAAjC,CAFwB,CAEY,AEEGsB,sBAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAA9B;ACCR,ADAK,ADHD,GCFY,CAMZ,ECDEW,AFHC,CAAC7B,IEGG,EFHG,CEGAuB,AFHCnB,KAAX,EAAiB,CEGC,CAAC0B,aAAT,CAAuB,OAAvB,CAAd;AHFI,AGGJ,AFHQ9B,IAAAA,EEGF+B,CHHGjC,EGGA,CFHK,CAACM,CEGHmB,IFHJ,EDAJ,CCAmB,CEGH,CHNQ,AGMPO,CHHE,CCAf,WEGI,CAAuB,QAAvB,CAAZ;AHFC,AGGD,AFHK,MEGCE,SAAS,GAAGT,QAAQ,CAACU,cAAT,CAAwB,QAAxB,CAAlB;AACAC,ADDI1B,EAAAA,GAAG,CAACR,CCCD,CAACmC,GAAR,CAAYH,ADDL,EAAS,OCChB;AHFAvC,AGKA,ADHQ,ADHJO,EAAAA,IEMEA,EFNI,CAACC,EDCA,CAACF,AGKA,CFNR,EEMW,IAAIN,EHLnB,CAAsBK,WAAtB,GAAoC,GGKrB,CAAgB,QHLgB;AAAG,AGM9CF,ADHI,ADHP,CALD,CEWIA,EAAE,EAAEiC,GDHK7B,ECEkB,IDFvB,GAAcA,MAAd,CAFQ,CAGR;AFHH,AGMD,ADFI,QFJGA,MAAM,GAAG;AACZC,AGMJJ,EAAAA,EHNII,IAAI,CGMD,CHNG,CGMF,CAAC,GFNEY,CDAK,AGMHuB,KHNQnC,IAAL,EADA,MGOP,EAAD,EAAiB,IAAIa,kBAAJ,EAAjB;AHLJZ,AGEuB,ADCvB,CCDO,CAAf,EHFQA,AGMJ,KHNS,CEGCkB,CFHC,MAAM,CEGC,GAAG,CFHCjB,GEGGkB,QFHR,EAFD,UEKK,CAAyB,KAAKJ,kBAA9B,EACb;AFHJtB,AEIQqB,IFJRrB,EEIQqB,GFJH,EAAE,KAAKrB,AEIM,EAAE,GFPR,EEOaqB;ACGjCe,ADJY,GCIT,CAACM,CDLqB,CAAjB,CALQ,CAUR,GCAR,GAAc,MAAM;AHNZ,AGMarC,EAAAA,MHNTI,AGMe,CAACD,IHNpB,GAAW,IGME;AHLT,AGK8B,ADClCiB,CCDR,GDCQA,QAAQ,CFNG,AEMFE,KFNO3B,EEMhB,CAAkB,EFNP,CAAWS,EEMCJ,GFNnB,GEMc,CAAYL,KAA9B;AFLC,AEMD4B,IAAAA,CFZY,OEYJ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,KAAKL,sBAAnD;ACDRa,ADEK,GApBW,CAqBZ,KCHK,CAACK,OAAV,GAAoB,MAAM;AHJlB,AGImBrC,ADIvB,ECJuBA,MHJfI,AGIqB,CAACQ,IHJ1B,CAAUP,IGIS,CHJnB,EAAiB;AACb,AGGkC,CAA9C,EAEA;AHJY,AGKZ;AHJY,AGKZ,ADCIY,EAAAA,kBAAkB,CAACQ,OAAD,EAAS;AFLnB,AEMJ,UAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB,CADuB,CAEvB;AFNI;AACA,AGIZ,ADEQ,ICFL,IDEQE,SAAH,EAAc,ICFAW,SAAtB,EAAgC;AHHpB,AGIRA,ADEQ,ECFRA,SAAS,ADEItC,CCFHuC,KDEF,CAAYtC,IAAZ,GCFR,CAAwBuC,QAAxB,CAAiC,sCAAjC,EAA2CC,KAA3C,CAAiDC,KAAK,IAAI;AHHlD,AGIJR,ADEC,ICFDA,CDAA,MCAO,ADEA,CCFCC,CHJG,EGIX,CAAYO,EHJI/C,GGIC,CAACgD,CHJP,CAAWvC,KAAX,AGIX,GHJ8BC,KAA1B,CARa,CAQoB;AAEpC,AGGJ,ADEO,GCJR,QDIaL,MAAL,CAAYE,KAAZ;ACDX,ADEQ;AFvBW,AEwBf,GFxBA;AAmBD,OAAKL,OAAL,CAAaS,OAAb,CAAqBC,MAAM,IAAI;AAC3BA,AEMJY,EAAAA,EFNIZ,MAAM,CAACC,GAAP,CAAWR,MAAX,EAD2B,CACL,AEMJ,GAAE;AFLA,AEMpB,UAAM2B,SAAS,GAAGJ,QAAQ,CAACK,eAAT,KAA6B,SAA/C;AFLH,GAHD,EApB2C,CAuBnB;AAC3B,AEKO,CF7BR,OE6BWD,SAAH,EAAa;AACT,WAAK3B,MAAL,CAAYC,IAAZ;AFLZR,AEMS,KAFD,MFJG,AEMI,CFNHM,SAAZ,CAAsBE,IAAtB,GAA6B,YAAU;AACnC,AEMQ,OFNHN,IEMQK,CFNb,CAAWC,IAAX,AEMQ,CAAYC,KAAZ;AFLX,AEMQ,CFRT;AESK;AFNLT,WAAW,CAACM,SAAZ,CAAsBI,WAAtB,GAAoC,YAAW;AAC3C,AEnCY,MFmCT,KAAKR,KAAL,CAAWc,MAAX,KAAsB,IAAzB,EAA+B,OAAO,KAAKd,KAAL,CAAWM,IAAX,EAAP;AAC/B,SAAO,KAAKN,KAAL,CAAWO,KAAX,EAAP;AACH,CAHD,cESeY,WAEd;AACD;AFRArB,AESA,WFTW,CAACM,SAAZ,CAAsBW,IAAtB,GAA6B,YAAU;AACnC,AESJ,OFTSf,KAAL,CAAWS,KAAX,GAAmB,IAAnB;AACH,AESD,CFXA;AEYA;AFTAX,WAAW,CAACM,SAAZ,CAAsBY,MAAtB,GAA+B,YAAU;AACrC,OAAKhB,KAAL,CAAWS,KAAX,GAAmB,KAAnB;AACH,CAFD;;AAGAX,WAAW,CAACM,SAAZ,CAAsBa,SAAtB,GAAkC,YAAU;AACxC,MAAG,KAAKjB,KAAL,CAAWS,KAAd,EAAqB,OAAO,KAAKT,KAAL,CAAWS,KAAX,GAAmB,KAA1B;AACjB,SAAO,KAAKT,KAAL,CAAWS,KAAX,GAAmB,IAA1B;AACP,CAHD;;eAKeX","file":"assets.8f4429fc.js","sourceRoot":"..","sourcesContent":["function MediaPlayer(config){\n    this.media = config.el // por ahora teniamos el video hardcoeado(video) estaba embebido, pero eso no es practico, por eso es mejor, pasar como parametro un objeto de configuracion \n    this.plugins = config.plugins || [] // vamos a declarar dentro del objeto un array donde pondremos todos los plugins, pasamos a index, para poder llenar este arreglo en la intacia.\n    this.initPlugins() // recordar que al hacer metodos en el prototipo, aqui solo se llama, pero abajo se va a crear con proptype\n}\n\nMediaPlayer.prototype.initPlugins = function (){  // esta funcion hara cositas con todos los plugins que hayamos definido.\n     const player = {\n        play: () => this.play(),\n        pause: () => this.playOrPause(),\n        media: this.media,\n        get muted(){\n            return this.media.muted\n        },\n        set muted(value) {\n            // if( value === true){\n            //     this.media.muted = true;\n            // }else {\n            //     this.media.muted = false;\n            // }\n            // es mejor :\n            // no estamos trabajando sobre propiedades existentes,NO estamos cambiando directamente el valor de muted\n            return this.media.muted = value; // si no através de propuedad virtual, recibimos un valor que hace algo diferente,\n\n        }\n     }                                    \n    this.plugins.forEach(plugin => {\n        plugin.run(player)    // en este this se esta haciendo referencia a la instancia de player\n                            //  este metodo ya pertecece a los plugins, en este caso solo tenemos autoplay, ahi vamso a guardar metodo run.\n    });                     // por cada plugin recibiremos una accion, por ello vamos a iterarlo.,dentro del foreach ejecutaremos su acciom, llamando a un metodo especifico. \n}                          \nMediaPlayer.prototype.play = function(){\n    this.media.play()\n}\nMediaPlayer.prototype.playOrPause = function() {\n    if(this.media.paused === true) return this.media.play() \n    return this.media.pause()\n}\nMediaPlayer.prototype.mute = function(){\n    this.media.muted = true;\n}\nMediaPlayer.prototype.unmute = function(){\n    this.media.muted = false;\n}\nMediaPlayer.prototype.muteOrNoT = function(){\n    if(this.media.muted) return this.media.muted = false;\n        return this.media.muted = true;\n}\n\nexport default MediaPlayer;\n","function AutoPlay(){}\nAutoPlay.prototype.run = function(player) { // recibimos una instacia del mediapleyer.\n    if(!player.muted){\n        player.muted = true;\n    }\n    player.play()\n}\n\nexport default AutoPlay;","class AutoPause {\n    constructor(){\n        this.threshhold = 0.25,\n        this.handleIntersection = this.handleIntersection.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    }\n    // recibe un metodo \n    run(player) {\n        //para poder llamar cosas ncesitamos \n        this.player = player;\n        // no funcionaba por que el que ejecuta el video es el IntersectionObserver y cambio el \n        //concepto de this.\n        const observer = new IntersectionObserver(this.handleIntersection,\n            {\n                threshhold: this.threshhold,\n            });\n\n        // el observador mirara el video que se reproduce.\n        observer.observe( this.player.media);\n        document.addEventListener(\"visibilitychange\", this.handleVisibilityChange)\n    }\n    // podremos enlistar todos los elementos \n    // en este caso solo hay uno,\n    handleIntersection(entries){\n        const entry = entries[0];\n        // si l oque recibe el intersector, es mayor que a lo del humbral entonces se hara visible.-- por ejeplo si mandar mas de un elemento como las classes, devolvera un arreglo con mas indices.\n        if(isVisible) {\n            this.player.play()\n        } else {\n            this.player.pause();\n        }    \n    }\n\n    handleVisibilityChange(){\n        const isVisible = document.visibilityState === \"visible\"\n        if(isVisible){\n            this.player.play()\n        } else {\n            this.player.pause();\n        }\n    }\n}\n\nexport default AutoPause; \n\n // en este mdetodo construiremos el intersectionObserver\n// Recibe dos argumentos, un handler que va a recibir la información \n// es el que va a observar y el segundo es un objeto de configuración.\n// a su vez el hanlder será un metodo de la classe y el objeto de configuración \n// necesitamos pasarle un HUMBRAl -> treshold lo que hara  es DEFINIR  que porciento de \n// elemento de contenedor debe de temner para darte aviso,cada que lleguemos a ese momento el estará observando y nos va a avisar.","import MediaPlayer from './MediaPlayer.js';\nimport AutoPLay from  '../plugins/AutoPlay.js'; // hay que especificar la terminación del archivo para no crear confuciones.\nimport AutoPause from '../plugins/AutoPause.js'\n\n\nconst video = document.querySelector('video');\nconst btn = document.querySelector('button');\nconst btnUnmute = document.getElementById('unmute');\nconsole.log(btnUnmute)\n\n\nconst player = new MediaPlayer({\n    el: video, \n    // Duda: ¿por que este autoplay sin llamarlo con parentesis funciona? \n    plugins:[new AutoPLay(), new AutoPause()],\n}); //in stanceamos a mediaplayer y pasamos un objeto de configuracion dentro de las propiedades del a inastancia\n\nbtn.onclick = () => {player.playOrPause()}\nbtnUnmute.onclick = () => {player.muteOrNoT()}\n\n// para SERVICE WORKERS que detectsara si el navegasdor del usuario le da apoyo \n// para poder recibir los service workers ,no todos lo tiene.\n// se registra el archiv, que sera tal cual es service worker.\n\nif('serviceWorker' in navigator){\n    navigator.serviceWorker.register('/sw.js').catch(error => {\n        console.log(error.message)\n    })\n}\n\n\n\n\n"]}