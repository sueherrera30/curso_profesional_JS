{"version":3,"sources":["ejercicios/typescript/index.ts"],"names":[],"mappings":"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","file":"typescript.72c601f0.js","sourceRoot":"..","sourcesContent":["console.log(\"hello typescript\");\n\n// estoy agregando typado a argumentos\nfunction add(a: number,b: number) {\n  return a + b;\n}\n//si pasamos mouse dice que es, es un numero.\n//le estamos hacendo analiis estatico\nconst sum = add(2,3);\n\n// basic 123 TYPESCRIPT\n\n//BOOLEAN\n//por si solo sabra el tipo pero, Podemos ser mas explicitos.\n// asignamos el typo nates de asignar valor.\nlet muted: boolean = true;\nmuted = false;\n\n// ya no podremos asignar otro tipo como string\n// si descomentas saldrá error por que no es el tipo.\n// muted= 4;\n\n//NUMEROS\nlet numerador:number = 42;\nlet denominador:number = 6;\nlet resultado = numerador/denominador;\n\n//STRING\nlet nombre: string = 'sue';\n\n// ARRAYS\n// POodemos decidir si queremos que sean diversos\n// o si queremos poner una especificación ya desidida.\n\n// aqui especificaré de que tipo son mis arreglos.\nlet people: string[] = [];\npeople = ['isabel','nicole', 'raul'];\n\n//ojo aqui: cuando pongo el punto me \n//indica que metodos tengo disponibles :D\n\n// si pongo un numero, me regaña,\n// people.push(2);\n\n// podemso tenerlo mezclado:\n\nlet peopleAndNumbers: Array< string | number > = [];\npeopleAndNumbers.push('suerox');\npeopleAndNumbers.push(7);\n\n// ENUM\n//conjunto de valores, que son lo que son no hay mas,\n// si tenemos que asignar un valor debe ser de las que se eligio\n// por ejemplo colores: rojo, verde etc.\n\nenum Color {\n  Rojo,\n  Verde,\n  Azul,\n}\n\nlet colorFavorito: Color = Color.Verde;\n// tambien puedes dar el valor escrito pero es mejor hacer referencia al obj que ya tieens \n\n// AL HACER UNA LISTA DE VALORES, se arrojara el indice.\n// para tener la palabra, semos explicitos, ponemos significado \n\nenum Color2 {\n  Rojo = 'Rojo',\n  Verde = 'Verde',\n  Azul = 'Azul',\n}\n\nlet colorFavorito2: Color2 = Color2.Verde;\n// me arrojara un numero \nconsole.log(` mi color favorito es ${colorFavorito2}`)\n\n//ANY\n// es como un comodin nos permite recibir varios tipos cuando\n// no sabemos que recibimos \n\nlet comodin: any = 'Joker';\ncomodin = { type: 'Wildcard'};\n//OBJECT \n\nlet someObject: object =  { type: 'Holito'};\n\n// te permite ser especifico.\n\n// js funcione tman argumentos y regresan valor en type podemso ser explicitos \n// como deben ser argumntos, podemos prover informacion de cual es el valor que debes regresar a la funcion\n\n// despues de parentesis, agregamos el tipo que regresa.\n\nfunction add2(a: number, b: number): number  {\n  return a + b;\n}\n\n//al poner los parentesis, ya me dice que debe regresar :D, \n// sy esta importada ayuda,\nconst sum2 = add(1,4);\n\n//aveces funciones regresan otras funciones:\n// para deficinir que regresa funcion con lo que recibe usamos:\n// () => \n// (number) => number\nfunction createAdder(a: number): (number) => number {\n  return function (b: number) {\n    return b + a;\n  }\n}\nconst addFour = createAdder(4);\nconst fourPlus6 = addFour(4);\n\nfunction fullName(firstName: string, lastName: string): string {\n  return `${firstName} ${lastName}`;\n};\nconst sue = fullName('suerox', 'herrera');\n\n// si no tengo la info, y no pongo argumento, me marca error entonces \n// indicar que sea opcional:\n// usamos signo de interrogacion  entonces permitira que \n// sea undefinded o string\n\n//VALOR OPCIONAL\nfunction fullName2(firstName: string, lastName?: string): string {\n  return `${firstName} ${lastName}`;\n};\n\n//VALOR POR OMISIÓN\n// despues del tipado poneos = mas l oque queremos poner como default:\n\nfunction fullName3(firstName: string, lastName: string = 'Martinez calcetines'): string {\n  return `${firstName} ${lastName}`;\n};\nconst name2 = fullName3('sue');\nconsole.log(name2);\n// log dara:\n// sue martinez calcetines \n\n\n// INTERFACES \n// nos permiten declarar la forma que tiene un objeto\n// ayuda a auntocompletado y errores\n\ninterface Rectangulo {\n  ancho: number,\n  alto: number,\n  color?: Colorcito;\n}\n\n\nenum Colorcito {\n  Rosa = \"Rosa\",\n  Verde = \"Verde\",\n}\n// cuando tenemos un interfaz se vuelve un tipo\n// mi variable sera del tipo rectangulo.\nlet rect: Rectangulo = {\n  ancho: 4,\n  alto: 3,\n  // opcion\n  color: Colorcito.Rosa,\n}\n\n// si trato de tipar algo, pero no completo todo,\n// dara error, pedira, sera requerida.\n\n// podemos poner parametros que vengan de esta interfaz\nfunction area(r: Rectangulo): number {\n  //autocompleta.\n  return r.ancho * r.alto;\n}\n\nconst areaRect = area(rect);\nconsole.log(areaRect);\n\n\n// si aplicamos metodo tu string nos dara [object, object]\n//  console.log(rect.toString())\n// los objetos herederan la funcion \n\nrect.toString = function() {\n  return `Un rectangulo ${this.color}`\n};\nconsole.log(rect.toString());\n\n\n// definene la FORMA EXACTA QEU DEBE TENER UN OBJETO\n// no podemos agregar una propiedad de mas o de menos, si quiero ponerla \n// opcional, debo marcarla.\n"]}